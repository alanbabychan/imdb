{"ast":null,"code":"const express = require('express');\nconst bcrypt = require('bcrypt');\nconst User = require('../models/User'); // Assuming you have a User model\n\nconst router = express.Router();\n\n// Signup Route\nrouter.post('/signup', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create new user\n    const newUser = new User({\n      username,\n      password: hashedPassword\n    });\n    await newUser.save();\n    res.status(201).json({\n      message: \"Signup successful\"\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: \"Error creating user\",\n      error: err\n    });\n  }\n});\n\n// Login Route\nrouter.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    // Find user by username\n    const user = await User.findOne({\n      username\n    });\n    if (!user) {\n      return res.status(400).json({\n        message: \"User not found\"\n      });\n    }\n\n    // Compare passwords\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (isMatch) {\n      res.status(200).json({\n        message: \"Login successful\"\n      });\n    } else {\n      res.status(400).json({\n        message: \"Incorrect password\"\n      });\n    }\n  } catch (err) {\n    res.status(500).json({\n      message: \"Error during login\",\n      error: err\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","User","router","Router","post","req","res","username","password","body","hashedPassword","hash","newUser","save","status","json","message","err","error","user","findOne","isMatch","compare","module","exports"],"sources":["D:/imdb/imdb/frontend/src/App.js"],"sourcesContent":["const express = require('express');\nconst bcrypt = require('bcrypt');\nconst User = require('../models/User'); // Assuming you have a User model\n\nconst router = express.Router();\n\n// Signup Route\nrouter.post('/signup', async (req, res) => {\n  const { username, password } = req.body;\n\n  try {\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create new user\n    const newUser = new User({ username, password: hashedPassword });\n    await newUser.save();\n\n    res.status(201).json({ message: \"Signup successful\" });\n  } catch (err) {\n    res.status(500).json({ message: \"Error creating user\", error: err });\n  }\n});\n\n// Login Route\nrouter.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n\n  try {\n    // Find user by username\n    const user = await User.findOne({ username });\n\n    if (!user) {\n      return res.status(400).json({ message: \"User not found\" });\n    }\n\n    // Compare passwords\n    const isMatch = await bcrypt.compare(password, user.password);\n\n    if (isMatch) {\n      res.status(200).json({ message: \"Login successful\" });\n    } else {\n      res.status(400).json({ message: \"Incorrect password\" });\n    }\n  } catch (err) {\n    res.status(500).json({ message: \"Error during login\", error: err });\n  }\n});\n\nmodule.exports = router;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,IAAI,GAAGF,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;;AAExC,MAAMG,MAAM,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC;;AAE/B;AACAD,MAAM,CAACE,IAAI,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEvC,IAAI;IACF;IACA,MAAMC,cAAc,GAAG,MAAMV,MAAM,CAACW,IAAI,CAACH,QAAQ,EAAE,EAAE,CAAC;;IAEtD;IACA,MAAMI,OAAO,GAAG,IAAIX,IAAI,CAAC;MAAEM,QAAQ;MAAEC,QAAQ,EAAEE;IAAe,CAAC,CAAC;IAChE,MAAME,OAAO,CAACC,IAAI,CAAC,CAAC;IAEpBP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAoB,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZX,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,qBAAqB;MAAEE,KAAK,EAAED;IAAI,CAAC,CAAC;EACtE;AACF,CAAC,CAAC;;AAEF;AACAf,MAAM,CAACE,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEvC,IAAI;IACF;IACA,MAAMU,IAAI,GAAG,MAAMlB,IAAI,CAACmB,OAAO,CAAC;MAAEb;IAAS,CAAC,CAAC;IAE7C,IAAI,CAACY,IAAI,EAAE;MACT,OAAOb,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAiB,CAAC,CAAC;IAC5D;;IAEA;IACA,MAAMK,OAAO,GAAG,MAAMrB,MAAM,CAACsB,OAAO,CAACd,QAAQ,EAAEW,IAAI,CAACX,QAAQ,CAAC;IAE7D,IAAIa,OAAO,EAAE;MACXf,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAmB,CAAC,CAAC;IACvD,CAAC,MAAM;MACLV,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAqB,CAAC,CAAC;IACzD;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZX,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,oBAAoB;MAAEE,KAAK,EAAED;IAAI,CAAC,CAAC;EACrE;AACF,CAAC,CAAC;AAEFM,MAAM,CAACC,OAAO,GAAGtB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}